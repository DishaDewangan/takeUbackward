{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\tub quiz app\\\\ReactQuizApp\\\\src\\\\components\\\\question\\\\Question.jsx\";\nimport styles from \"./Question.module.css\";\nimport { TiTickOutline } from \"react-icons/ti\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Question = _ref => {\n  let {\n    index,\n    data,\n    selectedAnswer,\n    correctAnswer,\n    onAnswerSelected\n  } = _ref;\n  const {\n    question,\n    choices\n  } = data;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.questionDiv,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.question,\n      children: [index + 1, \". \", question]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.options,\n      children: choices.map((option, idx) => {\n        const isCorrect = option === correctAnswer; // Check if this option is correct\n        const isSelected = selectedAnswer === option; // Check if this option is selected by the user\n\n        let optionClass = styles.option; // Default class for options\n        let icon = null; // Default icon is null\n\n        // Highlight the selected option and compare it to the correct answer\n        if (isSelected) {\n          if (isCorrect) {\n            optionClass = styles.correctOption; // User selected the correct option\n            icon = /*#__PURE__*/_jsxDEV(TiTickOutline, {\n              style: {\n                fontSize: \"20px\",\n                color: \"green\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 22\n            }, this);\n          } else {\n            optionClass = styles.incorrectOption; // User selected the wrong option\n          }\n        } else if (isCorrect) {\n          optionClass = styles.correctOption; // Mark correct options even if they are not selected\n          icon = /*#__PURE__*/_jsxDEV(TiTickOutline, {\n            style: {\n              fontSize: \"20px\",\n              color: \"green\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 20\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: optionClass,\n          onClick: () => onAnswerSelected(index, option) // Handle answer selection\n          ,\n          children: [option, \" \\xA0\", icon]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["styles","TiTickOutline","jsxDEV","_jsxDEV","Question","_ref","index","data","selectedAnswer","correctAnswer","onAnswerSelected","question","choices","className","questionDiv","children","fileName","_jsxFileName","lineNumber","columnNumber","options","map","option","idx","isCorrect","isSelected","optionClass","icon","correctOption","style","fontSize","color","incorrectOption","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/tub quiz app/ReactQuizApp/src/components/question/Question.jsx"],"sourcesContent":["import styles from \"./Question.module.css\";\r\nimport { TiTickOutline } from \"react-icons/ti\";\r\n\r\nexport const Question = ({ index, data, selectedAnswer, correctAnswer, onAnswerSelected }) => {\r\n  const { question, choices } = data;\r\n\r\n  return (\r\n    <div key={index} className={styles.questionDiv}>\r\n      <p className={styles.question}>\r\n        {index + 1}. {question}\r\n      </p>\r\n      <ul className={styles.options}>\r\n        {choices.map((option, idx) => {\r\n          const isCorrect = option === correctAnswer; // Check if this option is correct\r\n          const isSelected = selectedAnswer === option; // Check if this option is selected by the user\r\n\r\n          let optionClass = styles.option; // Default class for options\r\n          let icon = null; // Default icon is null\r\n\r\n          // Highlight the selected option and compare it to the correct answer\r\n          if (isSelected) {\r\n            if (isCorrect) {\r\n              optionClass = styles.correctOption; // User selected the correct option\r\n              icon = <TiTickOutline style={{ fontSize: \"20px\", color: \"green\" }} />;\r\n            } else {\r\n              optionClass = styles.incorrectOption; // User selected the wrong option\r\n            }\r\n          } else if (isCorrect) {\r\n            optionClass = styles.correctOption; // Mark correct options even if they are not selected\r\n            icon = <TiTickOutline style={{ fontSize: \"20px\", color: \"green\" }} />;\r\n          }\r\n\r\n          return (\r\n            <li\r\n              key={idx}\r\n              className={optionClass}\r\n              onClick={() => onAnswerSelected(index, option)} // Handle answer selection\r\n            >\r\n              {option} &nbsp;\r\n              {icon}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,SAASC,aAAa,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAsE;EAAA,IAArE;IAAEC,KAAK;IAAEC,IAAI;IAAEC,cAAc;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAAL,IAAA;EACvF,MAAM;IAAEM,QAAQ;IAAEC;EAAQ,CAAC,GAAGL,IAAI;EAElC,oBACEJ,OAAA;IAAiBU,SAAS,EAAEb,MAAM,CAACc,WAAY;IAAAC,QAAA,gBAC7CZ,OAAA;MAAGU,SAAS,EAAEb,MAAM,CAACW,QAAS;MAAAI,QAAA,GAC3BT,KAAK,GAAG,CAAC,EAAC,IAAE,EAACK,QAAQ;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eACJhB,OAAA;MAAIU,SAAS,EAAEb,MAAM,CAACoB,OAAQ;MAAAL,QAAA,EAC3BH,OAAO,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;QAC5B,MAAMC,SAAS,GAAGF,MAAM,KAAKb,aAAa,CAAC,CAAC;QAC5C,MAAMgB,UAAU,GAAGjB,cAAc,KAAKc,MAAM,CAAC,CAAC;;QAE9C,IAAII,WAAW,GAAG1B,MAAM,CAACsB,MAAM,CAAC,CAAC;QACjC,IAAIK,IAAI,GAAG,IAAI,CAAC,CAAC;;QAEjB;QACA,IAAIF,UAAU,EAAE;UACd,IAAID,SAAS,EAAE;YACbE,WAAW,GAAG1B,MAAM,CAAC4B,aAAa,CAAC,CAAC;YACpCD,IAAI,gBAAGxB,OAAA,CAACF,aAAa;cAAC4B,KAAK,EAAE;gBAAEC,QAAQ,EAAE,MAAM;gBAAEC,KAAK,EAAE;cAAQ;YAAE;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UACvE,CAAC,MAAM;YACLO,WAAW,GAAG1B,MAAM,CAACgC,eAAe,CAAC,CAAC;UACxC;QACF,CAAC,MAAM,IAAIR,SAAS,EAAE;UACpBE,WAAW,GAAG1B,MAAM,CAAC4B,aAAa,CAAC,CAAC;UACpCD,IAAI,gBAAGxB,OAAA,CAACF,aAAa;YAAC4B,KAAK,EAAE;cAAEC,QAAQ,EAAE,MAAM;cAAEC,KAAK,EAAE;YAAQ;UAAE;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QACvE;QAEA,oBACEhB,OAAA;UAEEU,SAAS,EAAEa,WAAY;UACvBO,OAAO,EAAEA,CAAA,KAAMvB,gBAAgB,CAACJ,KAAK,EAAEgB,MAAM,CAAE,CAAC;UAAA;UAAAP,QAAA,GAE/CO,MAAM,EAAC,OACR,EAACK,IAAI;QAAA,GALAJ,GAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMN,CAAC;MAET,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA,GApCGb,KAAK;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAqCV,CAAC;AAEV,CAAC;AAACe,EAAA,GA3CW9B,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}