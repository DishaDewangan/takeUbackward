{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\tub quiz app\\\\ReactQuizApp\\\\src\\\\screens\\\\reviewScreen\\\\ReviewScreen.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport styles from \"./ReviewScreen.module.css\";\nimport appStyles from \"../../App.module.css\";\nimport { quizData } from \"../../utils/quizData\";\nimport { InfoToolTip } from \"../../components/toolTip/InfoToolTip\";\nimport { Question } from \"../../components/question/Question\";\nimport cx from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReviewScreen = _ref => {\n  _s();\n  let {\n    setIsRetake,\n    selectedAnswers\n  } = _ref;\n  const {\n    questions\n  } = quizData;\n\n  // State to store user answers for each question, initialized with the selectedAnswers passed as props\n  const [userAnswers, setUserAnswers] = useState(selectedAnswers);\n  useEffect(() => {\n    // Ensure the selected answers are updated whenever `selectedAnswers` changes\n    setUserAnswers(selectedAnswers);\n  }, [selectedAnswers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx(appStyles.fadeInRight, styles.reviewScreenWrapper),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.reviewScreen,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.columnContainer,\n        children: questions.map((data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.column,\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            index: index,\n            data: data,\n            selectedAnswer: userAnswers[index] // Pass the selected answer to compare\n            ,\n            correctAnswer: data.correctAnswer // Pass the correct answer\n            ,\n            onAnswerSelected: () => {} // No need to handle selection in review screen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.btnDiv,\n        children: /*#__PURE__*/_jsxDEV(InfoToolTip, {\n          text: \"Click me to retake the quiz!\",\n          component: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setIsRetake(true);\n            },\n            className: styles.retakeBtn,\n            children: \"Retake Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(ReviewScreen, \"tfe7ytX0LCUficdwKidpPC0OH5A=\");\n_c = ReviewScreen;\nvar _c;\n$RefreshReg$(_c, \"ReviewScreen\");","map":{"version":3,"names":["useState","useEffect","styles","appStyles","quizData","InfoToolTip","Question","cx","jsxDEV","_jsxDEV","ReviewScreen","_ref","_s","setIsRetake","selectedAnswers","questions","userAnswers","setUserAnswers","className","fadeInRight","reviewScreenWrapper","children","reviewScreen","columnContainer","map","data","index","column","selectedAnswer","correctAnswer","onAnswerSelected","fileName","_jsxFileName","lineNumber","columnNumber","btnDiv","text","component","onClick","retakeBtn","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/tub quiz app/ReactQuizApp/src/screens/reviewScreen/ReviewScreen.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport styles from \"./ReviewScreen.module.css\";\r\nimport appStyles from \"../../App.module.css\";\r\nimport { quizData } from \"../../utils/quizData\";\r\nimport { InfoToolTip } from \"../../components/toolTip/InfoToolTip\";\r\nimport { Question } from \"../../components/question/Question\";\r\nimport cx from \"classnames\";\r\n\r\nexport const ReviewScreen = ({ setIsRetake, selectedAnswers }) => {\r\n  const { questions } = quizData;\r\n\r\n  // State to store user answers for each question, initialized with the selectedAnswers passed as props\r\n  const [userAnswers, setUserAnswers] = useState(selectedAnswers);\r\n\r\n  useEffect(() => {\r\n    // Ensure the selected answers are updated whenever `selectedAnswers` changes\r\n    setUserAnswers(selectedAnswers);\r\n  }, [selectedAnswers]);\r\n\r\n  return (\r\n    <div className={cx(appStyles.fadeInRight, styles.reviewScreenWrapper)}>\r\n      <div className={styles.reviewScreen}>\r\n        {/* Dynamically map through all questions */}\r\n        <div className={styles.columnContainer}>\r\n          {questions.map((data, index) => (\r\n            <div className={styles.column} key={index}>\r\n              <Question\r\n                index={index}\r\n                data={data}\r\n                selectedAnswer={userAnswers[index]} // Pass the selected answer to compare\r\n                correctAnswer={data.correctAnswer} // Pass the correct answer\r\n                onAnswerSelected={() => {}} // No need to handle selection in review screen\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className={styles.btnDiv}>\r\n          <InfoToolTip\r\n            text=\"Click me to retake the quiz!\"\r\n            component={\r\n              <button\r\n                onClick={() => {\r\n                  setIsRetake(true);\r\n                }}\r\n                className={styles.retakeBtn}\r\n              >\r\n                Retake Quiz\r\n              </button>\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,WAAW,QAAQ,sCAAsC;AAClE,SAASC,QAAQ,QAAQ,oCAAoC;AAC7D,OAAOC,EAAE,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAAsC;EAAAC,EAAA;EAAA,IAArC;IAAEC,WAAW;IAAEC;EAAgB,CAAC,GAAAH,IAAA;EAC3D,MAAM;IAAEI;EAAU,CAAC,GAAGX,QAAQ;;EAE9B;EACA,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAACc,eAAe,CAAC;EAE/Db,SAAS,CAAC,MAAM;IACd;IACAgB,cAAc,CAACH,eAAe,CAAC;EACjC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,oBACEL,OAAA;IAAKS,SAAS,EAAEX,EAAE,CAACJ,SAAS,CAACgB,WAAW,EAAEjB,MAAM,CAACkB,mBAAmB,CAAE;IAAAC,QAAA,eACpEZ,OAAA;MAAKS,SAAS,EAAEhB,MAAM,CAACoB,YAAa;MAAAD,QAAA,gBAElCZ,OAAA;QAAKS,SAAS,EAAEhB,MAAM,CAACqB,eAAgB;QAAAF,QAAA,EACpCN,SAAS,CAACS,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBjB,OAAA;UAAKS,SAAS,EAAEhB,MAAM,CAACyB,MAAO;UAAAN,QAAA,eAC5BZ,OAAA,CAACH,QAAQ;YACPoB,KAAK,EAAEA,KAAM;YACbD,IAAI,EAAEA,IAAK;YACXG,cAAc,EAAEZ,WAAW,CAACU,KAAK,CAAE,CAAC;YAAA;YACpCG,aAAa,EAAEJ,IAAI,CAACI,aAAc,CAAC;YAAA;YACnCC,gBAAgB,EAAEA,CAAA,KAAM,CAAC,CAAE,CAAC;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B;QAAC,GAPgCR,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQpC,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENzB,OAAA;QAAKS,SAAS,EAAEhB,MAAM,CAACiC,MAAO;QAAAd,QAAA,eAC5BZ,OAAA,CAACJ,WAAW;UACV+B,IAAI,EAAC,8BAA8B;UACnCC,SAAS,eACP5B,OAAA;YACE6B,OAAO,EAAEA,CAAA,KAAM;cACbzB,WAAW,CAAC,IAAI,CAAC;YACnB,CAAE;YACFK,SAAS,EAAEhB,MAAM,CAACqC,SAAU;YAAAlB,QAAA,EAC7B;UAED;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QACT;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/CWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}